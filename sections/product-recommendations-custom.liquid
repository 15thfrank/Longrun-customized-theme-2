<style>
    @media only screen and (min-width: 750px) {
      .product-recommendations__slide {
        -webkit-flex: 0 0 calc(100% / 4 - 4rem) !important;
        -moz-flex: 0 0 calc(100% / 4- 4rem) !important;
        -ms-flex: 0 0 calc(100% / 4 - 4rem) !important;
        flex: 0 0 calc(100% / 4 - 4rem) !important;
        margin: 2rem; }
      .product-recommendations__slider {
          justify-content: center !important;
      }
    }
</style>

{% if section.settings.show_recommendations %}
  <div class="product-recommendations" data-url="{{ routes.product_recommendations_url }}?section_id={{ section.id }}&product_id={{ product.id }}&limit=4" style="margin-top:25px;">
    {%- if recommendations.products_count > 0 -%}
      <div class="product-recommendations">
        <div class="product-recommendations__heading grid text-center">
          <div class="grid__item medium-up--ten-twelfths medium-up--push-one-twelfth">
            <h2>{{ section.settings.heading | escape }}</h2>
          </div>
        </div>
        <ul class="product-recommendations__slider" data-recommendations-slider>
          {%- for product in recommendations.products -%}
            <li class="product-recommendations__slide" data-recommendations-slide data-product-recommendation-index="{{ forloop.index }}">
              {% include 'product-card', product: product %}
            </li>
          {%- endfor -%}
        </ul>
        {%- if recommendations.products_count > 1 -%}
          <div class="product-recommendations__indicators-wrapper" aria-hidden="true" data-recommendations-indicators>
            {%- for product in recommendations.products -%}
              <span class="product-recommendations__slide-indicator" data-recommendations-indicator data-product-recommendation-indicator-index="{{ forloop.index }}"></span>
            {%- endfor -%}
          </div>
        {%- endif -%}
      </div>
    {%- endif -%}
  </div>
{% endif %}


<script>
  const handleIntersection = (entries, observer) => {
    if (!entries[0].isIntersecting) return;

    observer.unobserve(productRecommendationsSection);

    const url = productRecommendationsSection.dataset.url;


    fetch(url)
      .then(response => response.text())
      .then(text => {
        const html = document.createElement('div');
        html.innerHTML = text;
        const recommendations = html.querySelector('.product-recommendations');

        if (recommendations && recommendations.innerHTML.trim().length) {
          productRecommendationsSection.innerHTML = recommendations.innerHTML;
        }
      })
      .catch(e => {
        console.error(e);
      });
  };

  const productRecommendationsSection = document.querySelector('.product-recommendations');
  const observer = new IntersectionObserver(handleIntersection, {rootMargin: '0px 0px 200px 0px'});

  observer.observe(productRecommendationsSection);
</script>


{% schema %}
  {
    "name": "Product recommendations",
    "settings": [
        {
            "type": "checkbox",
            "id": "show_recommendations",
            "label": "Show product recommendations",
            "default": true
        },
        {
            "type": "text",
            "id": "heading",
            "label": "Heading",
            "default": "You may also like"
        }
    ]
  }
{% endschema %}
